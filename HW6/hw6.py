# -*- coding: utf-8 -*-
"""hw6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18zTSjJKecgp_rS9KfMJbczyanTLR2w-b

# **Homework 6 - Generative Adversarial Network**

This is the example code of homework 6 of the machine learning course by Prof. Hung-yi Lee.


In this homework, you are required to build a generative adversarial  network for anime face generation.

## Set up the environment
"""

!nvidia-smi

from google.colab import drive
drive.mount('/content/drive')

# !mkdir -p /content/drive/MyDrive/ML2021-hw6/

# savedir = "/content/drive/MyDrive/ML2021-hw6/ckpts/gan"

"""### Packages Installation"""

# You may replace the workspace directory if you want.
workspace_dir = '.'

# Training progress bar
!pip install -q qqdm

"""### Download the dataset
**Please use the link according to the last digit of your student ID first!**

If all download links fail, please follow [here](https://drive.google.com/drive/folders/13T0Pa_WGgQxNkqZk781qhc5T9-zfh19e).

* To open the file using your browser, use the link below (replace the id first!):
https://drive.google.com/file/d/REPLACE_WITH_ID
* e.g. https://drive.google.com/file/d/1IGrTr308mGAaCKotpkkm8wTKlWs9Jq-p
"""

# !gdown --id 1IGrTr308mGAaCKotpkkm8wTKlWs9Jq-p --output "{workspace_dir}/crypko_data.zip"

# Other download links
#   Please uncomment the line according to the last digit of your student ID first

# 0
# !gdown --id 131zPaVoi-U--XThvzgRfaxrumc3YSBd3 --output "{workspace_dir}/crypko_data.zip"

# 1
# !gdown --id 1kCuIj1Pf3T2O94H9bUBxjPBKb---WOmH --output "{workspace_dir}/crypko_data.zip"

# 2
# !gdown --id 1boEoiiqBJwoHVvjmI0xgoutE9G0Rv8CD --output "{workspace_dir}/crypko_data.zip"

# 3
# !gdown --id 1Ic0mktAQQvnNAnswrPHsg-u2OWGBXTWF --output "{workspace_dir}/crypko_data.zip"

# 4
# !gdown --id 1PFcc25r9tLE7OyQ-CDadtysNdWizk6Yg --output "{workspace_dir}/crypko_data.zip"

# 5
# !gdown --id 1wgkrYkTrhwDSMdWa5NwpXeE4-7JaUuX2 --output "{workspace_dir}/crypko_data.zip"

# 6
# !gdown --id 19gwNYWi9gN9xVL86jC3v8qqNtrXyq5Bf --output "{workspace_dir}/crypko_data.zip"

# 7 
# !gdown --id 1-KPZB6frRSRLRAtQfafKCVA7em0_NrJG --output "{workspace_dir}/crypko_data.zip"

# 8
# !gdown --id 1rNBfmn0YBzXuG5ub7CXbsGwduZqEs8hx --output "{workspace_dir}/crypko_data.zip"

# 9
# !gdown --id 113NEISX-2j6rBd1yyBx0c3_9nPIzSNz- --output "{workspace_dir}/crypko_data.zip"

!gdown --id 1v54rXQVbsHeg2yytBGMZp12YliJRsuTo --output "{workspace_dir}/crypko_data.zip"

# !gdown --id '1RUPXJpDFJyX5IMq8i51J2_h13azs80vl' --output stylegan2_pytorch.zip
# !unzip stylegan2_pytorch.zip

"""###Unzip the downloaded file.
The unzipped tree structure is like 
```
faces/
├── 1.jpg
├── 2.jpg
├── 3.jpg
...
```
"""

!unzip -q "{workspace_dir}/crypko_data.zip" -d "{workspace_dir}/"

!pip install stylegan2_pytorch
!stylegan2_pytorch --data {workspace_dir}/faces --network_capacity 32 --image_size 64 --batch_size 4 --num_train_steps 60000 --save_every 6000 --results_dir /content/drive/MyDrive/ML2021-hw6-60000steps/ckpts/gan_result --models_dir /content/drive/MyDrive/ML2021-hw6-60000steps/ckpts/gan_model --num_image_tiles 4 --gradient_accumulate_every 1

# Commented out IPython magic to ensure Python compatibility.
import os
os.makedirs('models', exist_ok=True)
os.makedirs('results', exist_ok=True)

!cp -r '/content/drive/MyDrive/ML2021-hw6-60000steps/ckpts/gan_model' '/content/models'
!cp -r '/content/drive/MyDrive/ML2021-hw6-60000steps/ckpts/gan_result' '/content/results'

import torch
from torchvision.utils import save_image
from stylegan2_pytorch import ModelLoader

loader = ModelLoader(
    base_dir = '/content',   # path to where you invoked the command line tool
    name = 'default'                   # the project name, defaults to 'default'
)


os.makedirs('output', exist_ok=True)
for i in range(1000):
  noise   = torch.randn(1, 512).cuda() # noise
  styles  = loader.noise_to_styles(noise, trunc_psi = 0.7)  # pass through mapping network
  images  = loader.styles_to_images(styles) # call the generator on intermediate style vectors
  save_image(images, f'output/{i+1}.jpg') # save your images, or do whatever you desire

# Compress the images.
# %cd output
!tar -zcf ../images.tgz *.jpg
# %cd ..

"""
reference: https://github.com/lucidrains/stylegan2-pytorch
"""

# raise

"""## Random seed
Set the random seed to a certain value for reproducibility.
"""

# import cv2
# import torch
# from PIL import Image
# import numpy as np
# !stylegan2_pytorch --generate --models_dir /content/drive/MyDrive/ML2021-hw6/ckpts/gan_model --results_dir /content --num_image_tiles 32 --load-from {96} --trunc_psi 0.5
# os.makedirs('crop_data', exist_ok=True)
# os.makedirs('output', exist_ok=True)

# path = './default/'
# new_name = 'pre_crop'
# temp_name = ''
# compare_num = 200
# for fname in os.listdir(path):
#   if len(fname)<compare_num:
#     temp_name = fname
#     compare_num = len(fname)
# os.rename(os.path.join(path, temp_name), os.path.join(path, new_name))

# img_BGR = cv2.imread("./default/pre_crop")
# img = img_BGR[:,:,::-1]#.transpose((2, 1))
# x = 0
# y = 0
# h = 66
# w = 66
# crop_img = [[0]*32 for i in range(32)]

# test_transform2 = transforms.Compose([
#             transforms.Resize((64, 64)),
#             transforms.ToTensor(),
#             transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
#         ])  

# for i in range(32):
#   for j in range(32):
#     crop_img[j][i] = img[2+y+i*h : y+(i+1)*h, 2+x+j*w : x+(j+1)*w]

#     # crop_img[j][i] = cv2.resize(crop_img[j][i], (64, 64), interpolation = cv2.INTER_AREA)
#     temp_tensor = test_transform2(Image.fromarray(crop_img[j][i])).unsqueeze(0)

#     # crop_img[j][i] = temp_tensor.numpy()
#     # c = crop_img[j][i]
#     c = temp_tensor.numpy()

#     # crop_img[j][i] = crop_img[j][i] * 0.003922
#     # crop_img[j][i] = np.array(Image.fromarray(crop_img[j][i]).resize((64, 64), Image.BILINEAR))
#     # c = np.swapaxes(c, 0, 2)
#     # c = np.swapaxes(c, 1, 3)
#     # c = np.swapaxes(c, 2, 3)
#     c = np.squeeze(c)
#     c = torch.from_numpy(c)

#     # print(crop_img[j][i].shape)
#     # tensss = torch.from_numpy(c)
#     # tensss = (tensss + 1) / 2.0
#     c = (c + 1) / 2.0

#     # cv2.imwrite(f'./crop_data/{j*32+i+1}.jpg', c)
#     torchvision.utils.save_image(c, f'./crop_data/{j*32+i+1}.jpg')
#     # cv2.imwrite(f'./crop_data/{j*32+i+1}.jpg', temp_tensor)

# for i in range(32):
#   for j in range(32):
#     if j != 31 or i < 8:
#       shutil.copy(f'./crop_data/{j*32+i+1}.jpg', './output')

# %cd output
# !tar -zcf ../images.tgz *.jpg
# %cd ..

# import random

# import torch
# import numpy as np


# def same_seeds(seed):
#     # Python built-in random module
#     random.seed(seed)
#     # Numpy
#     np.random.seed(seed)
#     # Torch
#     torch.manual_seed(seed)
#     if torch.cuda.is_available():
#         torch.cuda.manual_seed(seed)
#         torch.cuda.manual_seed_all(seed)
#     torch.backends.cudnn.benchmark = False
#     torch.backends.cudnn.deterministic = True

# same_seeds(2021)

"""## Import Packages
First, we need to import packages that will be used later.

Like hw3, we highly rely on **torchvision**, a library of PyTorch.
"""

# import os
# import glob

# import torch.nn as nn
# import torch.nn.functional as F
# import torchvision
# import torchvision.transforms as transforms
# from torch import optim
# from torch.autograd import Variable
# from torch.utils.data import Dataset, DataLoader
# import matplotlib.pyplot as plt
# from qqdm.notebook import qqdm
# from pathlib import Path

# import shutil

"""## Dataset
1. Resize the images to (64, 64)
1. Linearly map the values from [0, 1] to  [-1, 1].

Please refer to [PyTorch official website](https://pytorch.org/vision/stable/transforms.html) for details about different transforms.

"""

# class CrypkoDataset(Dataset):
#     def __init__(self, fnames, transform):
#         self.transform = transform
#         self.fnames = fnames
#         self.num_samples = len(self.fnames)

#     def __getitem__(self,idx):
#         fname = self.fnames[idx]
#         # 1. Load the image
#         img = torchvision.io.read_image(fname)
#         # 2. Resize and normalize the images using torchvision.
#         img = self.transform(img)
#         return img

#     def __len__(self):
#         return self.num_samples


# def get_dataset(root):
#     fnames = glob.glob(os.path.join(root, '*'))
#     # 1. Resize the image to (64, 64)
#     # 2. Linearly map [0, 1] to [-1, 1]
#     compose = [
#         transforms.ToPILImage(),
#         transforms.Resize((64, 64)),
#         transforms.ToTensor(),
#         transforms.Normalize(mean=(0.5, 0.5, 0.5), std=(0.5, 0.5, 0.5)),
#     ]
#     transform = transforms.Compose(compose)
#     dataset = CrypkoDataset(fnames, transform)
#     return dataset

"""### Show some images
Note that the values are in the range of [-1, 1], we should shift them to the valid range, [0, 1], to display correctly.
"""

# dataset = get_dataset(os.path.join(workspace_dir, 'faces'))

# images = [dataset[i] for i in range(16)]
# grid_img = torchvision.utils.make_grid(images, nrow=4)
# plt.figure(figsize=(10,10))
# plt.imshow(grid_img.permute(1, 2, 0))
# plt.show()

# images = [(dataset[i]+1)/2 for i in range(16)]
# grid_img = torchvision.utils.make_grid(images, nrow=4)
# plt.figure(figsize=(10,10))
# plt.imshow(grid_img.permute(1, 2, 0))
# plt.show()

"""## Model
Here, we use DCGAN as the model structure. Feel free to modify your own model structure.

Note that the `N` of the input/output shape stands for the batch size.
"""

# def weights_init(m):
#     classname = m.__class__.__name__
#     if classname.find('Conv') != -1:
#         m.weight.data.normal_(0.0, 0.02)
#     elif classname.find('BatchNorm') != -1:
#         m.weight.data.normal_(1.0, 0.02)
#         m.bias.data.fill_(0)

# class Generator(nn.Module):
#     """
#     Input shape: (N, in_dim)
#     Output shape: (N, 3, 64, 64)
#     """
#     def __init__(self, in_dim, dim=64):
#         super(Generator, self).__init__()
#         def dconv_bn_relu(in_dim, out_dim):
#             return nn.Sequential(
#                 nn.ConvTranspose2d(in_dim, out_dim, 5, 2,
#                                    padding=2, output_padding=1, bias=False),
#                 nn.BatchNorm2d(out_dim),
#                 nn.ReLU()
#             )
#         self.l1 = nn.Sequential(
#             nn.Linear(in_dim, dim * 8 * 4 * 4, bias=False),
#             nn.BatchNorm1d(dim * 8 * 4 * 4),
#             nn.ReLU()
#         )
#         self.l2_5 = nn.Sequential(
#             dconv_bn_relu(dim * 8, dim * 4),
#             dconv_bn_relu(dim * 4, dim * 2),
#             dconv_bn_relu(dim * 2, dim),
#             nn.ConvTranspose2d(dim, 3, 5, 2, padding=2, output_padding=1),
#             nn.Tanh()
#         )
#         self.apply(weights_init)

#     def forward(self, x):
#         y = self.l1(x)
#         y = y.view(y.size(0), -1, 4, 4)
#         y = self.l2_5(y)
#         return y

# class Discriminator(nn.Module):
#     """
#     Input shape: (N, 3, 64, 64)
#     Output shape: (N, )
#     """
#     def __init__(self, in_dim, dim=64):
#         super(Discriminator, self).__init__()

#         def conv_bn_lrelu(in_dim, out_dim):
#             return nn.Sequential(
#                 nn.Conv2d(in_dim, out_dim, 5, 2, 2),
#                 nn.BatchNorm2d(out_dim),
#                 nn.LeakyReLU(0.2),
#             )
            
#         """ Medium: Remove the last sigmoid layer for WGAN. """
#         self.ls = nn.Sequential(
#             nn.Conv2d(in_dim, dim, 5, 2, 2), 
#             nn.LeakyReLU(0.2),
#             conv_bn_lrelu(dim, dim * 2),
#             conv_bn_lrelu(dim * 2, dim * 4),
#             conv_bn_lrelu(dim * 4, dim * 8),
#             nn.Conv2d(dim * 8, 1, 4),
#             # nn.Sigmoid(), 
#         )
#         self.apply(weights_init)
        
#     def forward(self, x):
#         y = self.ls(x)
#         y = y.view(-1)
#         return y

# def try_load_checkpoint(model, optimizer=None, name=None):
#     name = name if name else "checkpoint_last.pt"
#     checkpath = Path(savedir)/name
#     if checkpath.exists():
#         check = torch.load(checkpath)

#         G.load_state_dict(check["Gmodel"])
#         D.load_state_dict(check["Dmodel"])
#         opt_G.load_state_dict(check["Gopt"])
#         opt_D.load_state_dict(check["Dopt"])

#         step = "unknown"
#         # if optimizer != None:
#         #     optimizer._step = step = check["optim"]["step"]

"""## Training

### Initialization
- hyperparameters
- model
- optimizer
- dataloader
"""

# # Training hyperparameters
# batch_size = 64
# z_dim = 100
# z_sample = Variable(torch.randn(100, z_dim)).cuda()
# lr = 1e-4

# """ Medium: WGAN, 50 epoch, n_critic=5, clip_value=0.01 """
# n_epoch = 50 # 50
# n_critic = 5 # 5
# clip_value = 0.01

# log_dir = os.path.join(workspace_dir, 'logs')
# ckpt_dir = os.path.join(workspace_dir, 'checkpoints')
# os.makedirs(log_dir, exist_ok=True)
# os.makedirs(ckpt_dir, exist_ok=True)

# # Model
# G = Generator(in_dim=z_dim).cuda()
# D = Discriminator(3).cuda()
# G.train()
# D.train()

# # Loss
# criterion = nn.BCELoss()

# """ Medium: Use RMSprop for WGAN. """
# # Optimizer
# # opt_D = torch.optim.Adam(D.parameters(), lr=lr, betas=(0.5, 0.999))
# # opt_G = torch.optim.Adam(G.parameters(), lr=lr, betas=(0.5, 0.999))
# opt_D = torch.optim.RMSprop(D.parameters(), lr=lr)
# opt_G = torch.optim.RMSprop(G.parameters(), lr=lr)


# # DataLoader
# dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True, num_workers=2)

# try_load_checkpoint(G, opt_G, name = "checkpoint_last.pt")
# try_load_checkpoint(D, opt_D, name = "checkpoint_last.pt")

"""### Training loop
We store some pictures regularly to monitor the current performance of the Generator, and regularly record checkpoints.
"""

# steps = 0
# for e, epoch in enumerate(range(n_epoch)):
#     progress_bar = qqdm(dataloader)
#     for i, data in enumerate(progress_bar):
#         imgs = data
#         imgs = imgs.cuda()

#         bs = imgs.size(0)

#         # ============================================
#         #  Train D
#         # ============================================
#         z = Variable(torch.randn(bs, z_dim)).cuda()
#         r_imgs = Variable(imgs).cuda()
#         f_imgs = G(z)

#         """ Medium: Use WGAN Loss. """
#         # Label
#         r_label = torch.ones((bs)).cuda()
#         f_label = torch.zeros((bs)).cuda()

#         # Model forwarding
#         r_logit = D(r_imgs.detach())
#         f_logit = D(f_imgs.detach())
        
#         # Compute the loss for the discriminator.
#         # r_loss = criterion(r_logit, r_label)
#         # f_loss = criterion(f_logit, f_label)
#         # loss_D = (r_loss + f_loss) / 2

#         # WGAN Loss
#         loss_D = -torch.mean(D(r_imgs)) + torch.mean(D(f_imgs))
       

#         # Model backwarding
#         D.zero_grad()
#         loss_D.backward()

#         # Update the discriminator.
#         opt_D.step()

#         """ Medium: Clip weights of discriminator. """
#         for p in D.parameters():
#            p.data.clamp_(-clip_value, clip_value)

#         # ============================================
#         #  Train G
#         # ============================================
#         if steps % n_critic == 0:
#             # Generate some fake images.
#             z = Variable(torch.randn(bs, z_dim)).cuda()
#             f_imgs = G(z)

#             # Model forwarding
#             f_logit = D(f_imgs)
            
#             """ Medium: Use WGAN Loss"""
#             # Compute the loss for the generator.
#             # loss_G = criterion(f_logit, r_label)
#             # WGAN Loss
#             loss_G = -torch.mean(D(f_imgs))

#             # Model backwarding
#             G.zero_grad()
#             loss_G.backward()

#             # Update the generator.
#             opt_G.step()

#         steps += 1
        
#         # Set the info of the progress bar
#         #   Note that the value of the GAN loss is not directly related to
#         #   the quality of the generated images.
#         progress_bar.set_infos({
#             'Loss_D': round(loss_D.item(), 4),
#             'Loss_G': round(loss_G.item(), 4),
#             'Epoch': e+1,
#             'Step': steps,
#         })

#     G.eval()
#     f_imgs_sample = (G(z_sample).data + 1) / 2.0
#     filename = os.path.join(log_dir, f'Epoch_{epoch+1:03d}.jpg')
#     torchvision.utils.save_image(f_imgs_sample, filename, nrow=10)
#     print(f' | Save some samples to {filename}.')
    
#     # Show generated images in the jupyter notebook.
#     grid_img = torchvision.utils.make_grid(f_imgs_sample.cpu(), nrow=10)
#     plt.figure(figsize=(10,10))
#     plt.imshow(grid_img.permute(1, 2, 0))
#     plt.show()
#     G.train()

#     if (e+1) % 5 == 0 or e == 0:
#         # Save the checkpoints.
#         # torch.save(G.state_dict(), os.path.join(ckpt_dir, 'G.pth'))
#         # torch.save(D.state_dict(), os.path.join(ckpt_dir, 'D.pth'))

#         savedir = Path(savedir).absolute()
#         savedir.mkdir(parents=True, exist_ok=True)
        
#         check = {
#             "epoch": e,
#             "Gmodel": G.state_dict(),
#             "Dmodel": D.state_dict(),
#             "Gopt": opt_G.state_dict(),
#             "Dopt": opt_D.state_dict()
#         }
#         torch.save(check, savedir/f"checkpoint{e}.pt")
#         shutil.copy(savedir/f"checkpoint{e}.pt", savedir/f"checkpoint_last.pt")

"""## Inference
Use the trained model to generate anime faces!

### Load model
"""

# import torch

# G = Generator(z_dim)
# G.load_state_dict(torch.load(os.path.join(ckpt_dir, 'G.pth')))
# G.eval()
# G.cuda()

"""### Generate and show some images.

"""

# # Generate 1000 images and make a grid to save them.
# n_output = 1000
# z_sample = Variable(torch.randn(n_output, z_dim)).cuda()
# imgs_sample = (G(z_sample).data + 1) / 2.0
# log_dir = os.path.join(workspace_dir, 'logs')
# filename = os.path.join(log_dir, 'result.jpg')
# torchvision.utils.save_image(imgs_sample, filename, nrow=10)

# # Show 32 of the images.
# grid_img = torchvision.utils.make_grid(imgs_sample[:32].cpu(), nrow=10)
# plt.figure(figsize=(10,10))
# plt.imshow(grid_img.permute(1, 2, 0))
# plt.show()

"""### Compress the generated images using **tar**.

"""

# # Save the generated images.
# os.makedirs('output', exist_ok=True)
# for i in range(1000):
#     torchvision.utils.save_image(imgs_sample[i], f'output/{i+1}.jpg')
  
# # Compress the images.
# %cd output
# !tar -zcf ../images.tgz *.jpg
# %cd ..